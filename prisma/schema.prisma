generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Activity {
  id            String     @default(cuid()) @id
  content       String
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  task          Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId        String
}

model Task {
  id            String     @default(cuid()) @id
  name          String
  description   String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  group         Group      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId       String
  activities    Activity[]
}

model Group {
  id            String     @default(cuid()) @id
  name          String
  tasks         Task[]
  taskOrder     String[]      @default([])
  workspace     Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId   String
}

model Workspace {
  id            String     @default(cuid()) @id
  name          String    
  groups        Group[]
  groupOrder    String[]      @default([])
  selected      Boolean    @default(false)
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
}

model User {
  id            String       @default(cuid()) @id
  name          String?
  email         String?   @unique
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  workspaces    Workspace[]
  @@map(name: "users")
}