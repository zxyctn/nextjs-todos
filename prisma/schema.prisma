generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Activity {
  id            String     @default(cuid()) @id
  content       String
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  task          Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId        String
}

model Task {
  id            String     @default(cuid()) @id
  name          String
  description   String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  group         Group      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId       String
  activities    Activity[]
}

model Group {
  id            String     @default(cuid()) @id
  name          String
  tasks         Task[]
  taskOrder     String[]      @default([])
  workspace     Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId   String
}

model Workspace {
  id            String     @default(cuid()) @id
  name          String    
  groups        Group[]
  groupOrder    String[]      @default([])
  selected      Boolean    @default(false)
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?@unique
  emailVerified DateTime?
  image         String?
  workspaces    Workspace[]
  accounts      Account[]
  sessions      Session[]
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique@map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}